name: Build and Deploy Frontend

on:
  workflow_run:
    workflows: ["Build and Push Backend"]
    types:
      - completed

env:
  REGISTRY: docker.io

jobs:
  build-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

    # Download backend tag from the completed workflow
    - name: Download backend tag artifact
      uses: actions/download-artifact@v4
      with:
        name: backend_tag
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}

    - name: Read backend tag
      run: |
        BACKEND_TAG=$(cat backend_tag.txt)
        echo "BACKEND_TAG=$BACKEND_TAG" >> $GITHUB_ENV
        echo "Backend tag: $BACKEND_TAG"

    - name: Set frontend tag
      id: set-frontend-tag
      run: |
        TAG=sha-${GITHUB_SHA::8}
        echo "$TAG" > tag.txt
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "tag=$TAG" >> $GITHUB_OUTPUT

    - name: Upload TAG artifact
      uses: actions/upload-artifact@v4
      with:
        name: tag
        path: tag.txt

    - name: Build and push frontend
      env:
        TAG: ${{ env.TAG }}
        BACKEND_TAG: ${{ env.BACKEND_TAG }}
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      run: |
        docker build -t $REGISTRY/${DOCKER_HUB_USERNAME}/frontendfinal:${TAG} -f frontend/Dockerfile ./frontend
        docker push $REGISTRY/${DOCKER_HUB_USERNAME}/frontendfinal:${TAG}

  deploy:
    needs: build-frontend
    runs-on: ubuntu-latest
    if: ${{ needs.build-frontend.result == 'success' }}

    steps:
    - name: Download TAG artifact
      uses: actions/download-artifact@v4
      with:
        name: tag

    - name: Download backend tag artifact
      uses: actions/download-artifact@v4
      with:
        name: backend_tag
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}

    - name: Read deployment tags
      run: |
        TAG=$(cat tag.txt)
        BACKEND_TAG=$(cat backend_tag.txt)
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "BACKEND_TAG=$BACKEND_TAG" >> $GITHUB_ENV

    - name: Set Docker Hub Username Env
      run: echo "DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}" >> $GITHUB_ENV

    - name: Set DB secrets as env
      run: |
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
        echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
        echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> $GITHUB_ENV
        echo "DB_TABLENAME=${{ secrets.DB_TABLENAME }}" >> $GITHUB_ENV
        echo "DB_WAITFORCONNECTIONS=${{ secrets.DB_WAITFORCONNECTIONS }}" >> $GITHUB_ENV
        echo "DB_CONNECTIONLIMIT=${{ secrets.DB_CONNECTIONLIMIT }}" >> $GITHUB_ENV
        echo "DB_QUEUELIMIT=${{ secrets.DB_QUEUELIMIT }}" >> $GITHUB_ENV
        echo "PORT=${{ secrets.PORT }}" >> $GITHUB_ENV

    - name: Deploy to VM via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ubuntu
        key: ${{ secrets.AWS_SSH_KEY }}
        envs: TAG,BACKEND_TAG,DOCKER_HUB_USERNAME,DB_HOST,DB_USER,DB_PASSWORD,DB_DATABASE,DB_TABLENAME,DB_WAITFORCONNECTIONS,DB_CONNECTIONLIMIT,DB_QUEUELIMIT,PORT
        script: |
          echo "=== DEBUG ENV VARS ==="
          echo "TAG: ${TAG}"
          echo "BACKEND_TAG: ${BACKEND_TAG}"
          echo "DOCKER_HUB_USERNAME: ${DOCKER_HUB_USERNAME}"
          echo "========================"
          
          if [ ! -d /home/ubuntu/docker-k8s-deployment ]; then
            git clone https://github.com/ishimwejeanluc/docker-k8s-deployment.git /home/ubuntu/docker-k8s-deployment;
          fi
          cd /home/ubuntu/docker-k8s-deployment
          git pull origin main

          # Show current docker-compose.yml before changes
          echo "=== BEFORE CHANGES ==="
          grep -A 1 -B 1 "image:" docker-compose.yml
          
          # Update image tags - fixed sed patterns
          sed -i "s|image: .*/backendfinal:.*|image: ${DOCKER_HUB_USERNAME}/backendfinal:${BACKEND_TAG}|g" docker-compose.yml
          sed -i "s|image: .*/frontendfinal:.*|image: ${DOCKER_HUB_USERNAME}/frontendfinal:${TAG}|g" docker-compose.yml
          
          # Update environment variables
          sed -i "s|DB_HOST: .*|DB_HOST: ${DB_HOST}|" docker-compose.yml
          sed -i "s|DB_USER: .*|DB_USER: ${DB_USER}|" docker-compose.yml
          sed -i "s|MYSQL_ROOT_PASSWORD: .*|MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}|" docker-compose.yml
           sed -i "s|DB_PASSWORD: .*|DB_PASSWORD: ${DB_PASSWORD}|" docker-compose.yml
          sed -i "s|MYSQL_DATABASE: .*|MYSQL_DATABASE: ${DB_DATABASE}|" docker-compose.yml
          sed -i "s|DB_TABLENAME: .*|DB_TABLENAME: ${DB_TABLENAME}|" docker-compose.yml
          sed -i "s|DB_WAITFORCONNECTIONS: .*|DB_WAITFORCONNECTIONS: ${DB_WAITFORCONNECTIONS}|" docker-compose.yml
          sed -i "s|DB_CONNECTIONLIMIT: .*|DB_CONNECTIONLIMIT: ${DB_CONNECTIONLIMIT}|" docker-compose.yml
          sed -i "s|DB_QUEUELIMIT: .*|DB_QUEUELIMIT: ${DB_QUEUELIMIT}|" docker-compose.yml
          sed -i "s|PORT: .*|PORT: ${PORT}|" docker-compose.yml

          # Show docker-compose.yml after changes
          echo "=== AFTER CHANGES ==="
          grep -A 1 -B 1 "image:" docker-compose.yml

          sudo docker compose -f docker-compose.yml config
          sudo docker compose -f docker-compose.yml pull
          sudo docker compose -f docker-compose.yml down
          sudo docker compose -f docker-compose.yml up -d --remove-orphans
      env:
        TAG: ${{ env.TAG }}
        BACKEND_TAG: ${{ env.BACKEND_TAG }}
        DOCKER_HUB_USERNAME: ${{ env.DOCKER_HUB_USERNAME }}
        DB_HOST: ${{ env.DB_HOST }}
        DB_USER: ${{ env.DB_USER }}
        DB_PASSWORD: ${{ env.DB_PASSWORD }}
        DB_DATABASE: ${{ env.DB_DATABASE }}
        DB_TABLENAME: ${{ env.DB_TABLENAME }}
        DB_WAITFORCONNECTIONS: ${{ env.DB_WAITFORCONNECTIONS }}
        DB_CONNECTIONLIMIT: ${{ env.DB_CONNECTIONLIMIT }}
        DB_QUEUELIMIT: ${{ env.DB_QUEUELIMIT }}
        PORT: ${{ env.PORT }}