name: Build and Deploy Frontend

on:
  workflow_run:
    workflows: ["Build and Push Backend"]
    types:
      - completed

env:
  REGISTRY: docker.io

jobs:
  build-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

    # FIX: Save backend tag as artifact for downstream job
    - name: Read backend image tag
      run: |
        echo "${{ needs.build-backend.outputs.backend-image-tag }}" > backend_tag.txt
    - name: Upload BACKEND_TAG artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend_tag
        path: backend_tag.txt

    - name: Set frontend tag
      id: set-frontend-tag
      run: |
        TAG=sha-${GITHUB_SHA::8}
        echo "$TAG" > tag.txt
        echo "tag=$TAG" >> $GITHUB_OUTPUT
    - name: Upload TAG artifact
      uses: actions/upload-artifact@v4
      with:
        name: tag
        path: tag.txt

    - name: Build and push frontend
      env:
        TAG: ${{ steps.set-frontend-tag.outputs.tag }}
        BACKEND_TAG: ${{ needs.build-backend.outputs.backend-image-tag }}
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      run: |
        docker build -t $REGISTRY/${DOCKER_HUB_USERNAME}/frontendfinal:${TAG} -f frontend/Dockerfile ./frontend
        docker push $REGISTRY/${DOCKER_HUB_USERNAME}/frontendfinal:${TAG}

  deploy:
    needs: build-frontend
    runs-on: ubuntu-latest
    if: ${{ needs.build-frontend.result == 'success' }}

    steps:
    - name: Download TAG artifact
      uses: actions/download-artifact@v4
      with:
        name: tag
    - name: Download BACKEND_TAG artifact
      uses: actions/download-artifact@v4
      with:
        name: backend_tag
    - name: Read deployment tags
      id: tag
      run: |
        TAG=$(cat tag.txt)
        BACKEND_TAG=$(cat backend_tag.txt)
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "BACKEND_TAG=$BACKEND_TAG" >> $GITHUB_ENV
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "backend_tag=$BACKEND_TAG" >> $GITHUB_OUTPUT
    - name: Deploy to VM via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ubuntu
        key: ${{ secrets.AWS_SSH_KEY }}
        envs: TAG,BACKEND_TAG,DOCKER_HUB_USERNAME,DB_HOST,DB_USER,DB_PASSWORD,DB_DATABASE,DB_TABLENAME,DB_WAITFORCONNECTIONS,DB_CONNECTIONLIMIT,DB_QUEUELIMIT,PORT
        script: |
          if [ ! -d /home/ubuntu/docker-k8s-deployment ]; then
            git clone https://github.com/ishimwejeanluc/docker-k8s-deployment.git /home/ubuntu/docker-k8s-deployment;
          fi
          cd /home/ubuntu/docker-k8s-deployment
          git pull origin main

          sed -i -E "s|(image:.*${DOCKER_HUB_USERNAME}/backendfinal:)[^\"'\ ]*|\1${BACKEND_TAG}|" docker-compose.yml
          sed -i -E "s|(image:.*${DOCKER_HUB_USERNAME}/frontendfinal:)[^\"'\ ]*|\1${TAG}|" docker-compose.yml
          sed -i "s|DB_HOST:.*|DB_HOST: ${DB_HOST}|" docker-compose.yml
          sed -i "s|DB_USER:.*|DB_USER: ${DB_USER}|" docker-compose.yml
          sed -i "s|DB_PASSWORD:.*|DB_PASSWORD: ${DB_PASSWORD}|" docker-compose.yml
          sed -i "s|DB_DATABASE:.*|DB_DATABASE: ${DB_DATABASE}|" docker-compose.yml
          sed -i "s|DB_TABLENAME:.*|DB_TABLENAME: ${DB_TABLENAME}|" docker-compose.yml
          sed -i "s|DB_WAITFORCONNECTIONS:.*|DB_WAITFORCONNECTIONS: ${DB_WAITFORCONNECTIONS}|" docker-compose.yml
          sed -i "s|DB_CONNECTIONLIMIT:.*|DB_CONNECTIONLIMIT: ${DB_CONNECTIONLIMIT}|" docker-compose.yml
          sed -i "s|DB_QUEUELIMIT:.*|DB_QUEUELIMIT: ${DB_QUEUELIMIT}|" docker-compose.yml
          sed -i "s|PORT:.*|PORT: ${PORT}|" docker-compose.yml

          sudo docker compose -f docker-compose.yml config
          sudo docker compose -f docker-compose.yml pull
          sudo docker compose -f docker-compose.yml down
          sudo docker compose -f docker-compose.yml up -d --remove-orphans
    env:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      DB_TABLENAME: ${{ secrets.DB_TABLENAME }}
      DB_WAITFORCONNECTIONS: ${{ secrets.DB_WAITFORCONNECTIONS }}
      DB_CONNECTIONLIMIT: ${{ secrets.DB_CONNECTIONLIMIT }}
      DB_QUEUELIMIT: ${{ secrets.DB_QUEUELIMIT }}
      PORT: ${{ secrets.PORT }}
